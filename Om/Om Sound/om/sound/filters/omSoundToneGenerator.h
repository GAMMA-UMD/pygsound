/*
 * Project:     Om Software
 * Version:     1.0.0
 * Website:     http://www.carlschissler.com/om
 * Author(s):   Carl Schissler
 * 
 * Copyright (c) 2016, Carl Schissler
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 * 	1. Redistributions of source code must retain the above copyright
 * 	   notice, this list of conditions and the following disclaimer.
 * 	2. Redistributions in binary form must reproduce the above copyright
 * 	   notice, this list of conditions and the following disclaimer in the
 * 	   documentation and/or other materials provided with the distribution.
 * 	3. Neither the name of the copyright holder nor the
 * 	   names of its contributors may be used to endorse or promote products
 * 	   derived from this software without specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER BE LIABLE FOR ANY
 * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

#ifndef INCLUDE_OM_SOUND_TONE_GENERATOR_H
#define INCLUDE_OM_SOUND_TONE_GENERATOR_H


#include "omSoundFiltersConfig.h"


#include "omSoundFilter.h"
#include "omSoundBandFilter.h"


//##########################################################################################
//*************************  Start Om Sound Filters Namespace  *****************************
OM_SOUND_FILTERS_NAMESPACE_START
//******************************************************************************************
//##########################################################################################




//********************************************************************************
/// A class that generates different types of test tones.
/**
  * These tones are common signals used in testing audio equipment such
  * as white noise, pink noise, sine waves, and other types of repeating waves.
  * These tones can also be used as an oscilation source for a synthesizer or
  * other virtual instrument.
  *
  * All of the tones that are generated by a ToneGenerator are peak-normalized
  * to just under 0dBFS when the output gain of the generator is 0dB.
  */
class ToneGenerator : public SoundFilter
{
	public:
		
		//********************************************************************************
		//******	Tone Type Enum
			
			
			/// An enum type which describes the various types of tones that a ToneGenerator can produce.
			enum ToneType
			{
				/// A pure sinusoidal tone at the generator's frequency and output gain.
				SINE = 0,
				
				/// A square-wave tone at the generator's frequency and output gain.
				SQUARE = 1,
				
				/// A saw-wave tone at the generator's frequency and output gain.
				SAW = 2,
				
				/// A triangle-wave tone at the generator's frequency and output gain.
				TRIANGLE = 3,
				
				/// Noise with equal power at all frequencies at the given output gain.
				WHITE_NOISE = 4,
				
				/// Noise where the power at a given frequency is inversely proportional to that frequency.
				PINK_NOISE = 5,
				
				/// Pink noise that has been band-pass filtered so that it covers a small frequency range.
				/**
				  * The tone generator uses an 8th order band-pass filter to filter a pink noise signal
				  * to a small bandwidth. This setting is useful when checking the response of a
				  * system over a narrow frequency band, rather than the full spectrum (pink noise),
				  * or a single frequency (sine wave).
				  */
				PINK_NOISE_BAND = 6
			};
			
			
		//********************************************************************************
		//******	Constructors
			
			
			/// Create a tone generator which generates a sine wave at 1000 Hz.
			ToneGenerator();
			
			
			/// Create a tone generator with the specified tone type at 1000 Hz.
			/**
			  * This constructor can be used to create tone generators for tone types
			  * that don't specify a frequency (white noise, pink noise).
			  */
			ToneGenerator( ToneType newType );
			
			
			/// Create a tone generator with the specified tone type and output gain with frequency at 1000Hz.
			/**
			  * This constructor can be used to create tone generators for tone types
			  * that don't specify a frequency (white noise, pink noise).
			  */
			ToneGenerator( ToneType newType, Gain newOutputGain );
			
			
			/// Create a tone generator with the specified tone type, output gain, and frequency.
			ToneGenerator( ToneType newType, Gain newOutputGain, Float newFrequency );
			
			
			/// Create a copy of the specified tone generator.
			ToneGenerator( const ToneGenerator& other );
			
			
		//********************************************************************************
		//******	Destructor
			
			
			/// Destory this tone generator and release all of its resources.
			~ToneGenerator();
			
			
		//********************************************************************************
		//******	Assignment Operator
			
			
			/// Assign the state of one tone generator to this one.
			ToneGenerator& operator = ( const ToneGenerator& other );
			
			
		//********************************************************************************
		//******	Tone Type Accessor Methods
			
			
			/// Return the type of tone that this tone generator is generating.
			/**
			  * The tone type can be one of several types of audio test tones
			  * (sine waves, square waves, saw waves, triangle waves, white noise,
			  * pink noise, etc.).
			  */
			OM_INLINE ToneType getType() const
			{
				return type;
			}
			
			
			/// Set the type of tone that this tone generator is generating.
			/**
			  * The tone type can be one of several types of audio test tones
			  * (sine waves, square waves, saw waves, triangle waves, white noise,
			  * pink noise, etc.).
			  */
			OM_INLINE void setType( ToneType newType )
			{
				lockMutex();
				type = newType;
				unlockMutex();
			}
			
			
		//********************************************************************************
		//******	Tone Frequency Accessor Methods
			
			
			/// Return the frequency of this tone generator in hertz.
			/**
			  * For frequency-local tones (i.e. not full-spectrum noise), this value
			  * indicates the dominant frequency of the generated tone. For most wave types
			  * (sine, square, saw, triangle) this is the frequency of the generated wave.
			  *
			  * This value has no effect for other noise types that contain information across
			  * the entire frequency spectrum (pink noise, white noise, etc.).
			  */
			OM_INLINE Float getFrequency() const
			{
				return targetFrequency;
			}
			
			
			/// Set the frequency of this tone generator in hertz.
			/**
			  * For frequency-local tones (i.e. not full-spectrum noise), this value
			  * indicates the dominant frequency of the generated tone. For most wave types
			  * (sine, square, saw, triangle) this is the frequency of the generated wave.
			  *
			  * This value has no effect for other noise types that contain information across
			  * the entire frequency spectrum (pink noise, white noise, etc.).
			  */
			OM_INLINE void setFrequency( Float newFrequency )
			{
				lockMutex();
				targetFrequency = math::max( newFrequency, Float(0) );
				unlockMutex();
			}
			
			
		//********************************************************************************
		//******	Frequency Bandwidth Accessor Methods
			
			
			/// Return the frequency bandwidth of this tone generator in octaves.
			/**
			  * This value is used to determine the width of the tone generator's noise
			  * band pass filter. The default value is 0.33333, or 1/3 of an octave.
			  */
			OM_INLINE Float getBandwidth() const
			{
				return bandwidth;
			}
			
			
			/// Return the frequency bandwidth of this tone generator in octaves.
			/**
			  * This value is used to determine the width of the tone generator's noise
			  * band pass filter. The default value is 0.33333, or 1/3 of an octave.
			  *
			  * The new bandwidth is clamped to the range [0,10].
			  */
			OM_INLINE void setBandwidth( Float newBandwidth )
			{
				lockMutex();
				bandwidth = math::clamp( newBandwidth, Float(0), Float(10) );
				unlockMutex();
			}
			
			
		//********************************************************************************
		//******	Tone Output Gain Accessor Methods
			
			
			/// Return the linear output gain of this tone generator.
			/**
			  * This is gain scaling factor that is applied to the output of whatever
			  * tone is being currently generated. The different tones are normalized
			  * to 0 dBFS, or as close as is possible. This factor adjusts their output
			  * level relative to that baseline. The default value is 0.5.
			  */
			OM_INLINE Gain getOutputGain() const
			{
				return targetOutputGain;
			}
			
			
			/// Return the output gain of this tone generator in decibels.
			/**
			  * This is gain scaling factor that is applied to the output of whatever
			  * tone is being currently generated. The different tones are normalized
			  * to 0 dBFS, or as close as is possible. This factor adjusts their output
			  * level relative to that baseline. The default value is -6dB.
			  */
			OM_INLINE Gain getOutputGainDB() const
			{
				return math::linearToDB( targetOutputGain );
			}
			
			
			/// Set the linear output gain of this tone generator.
			/**
			  * This is gain scaling factor that is applied to the output of whatever
			  * tone is being currently generated. The different tones are normalized
			  * to 0 dBFS, or as close as is possible. This factor adjusts their output
			  * level relative to that baseline. The default value is 0.5.
			  */
			OM_INLINE void setOutputGain( Gain newOutputGain )
			{
				lockMutex();
				targetOutputGain = newOutputGain;
				unlockMutex();
			}
			
			
			/// Set the output gain of this tone generator in decibels.
			/**
			  * This is gain scaling factor that is applied to the output of whatever
			  * tone is being currently generated. The different tones are normalized
			  * to 0 dBFS, or as close as is possible. This factor adjusts their output
			  * level relative to that baseline. The default value is -6dB.
			  */
			OM_INLINE void setOutputGainDB( Gain newDBOutputGain )
			{
				lockMutex();
				targetOutputGain = math::dbToLinear( newDBOutputGain );
				unlockMutex();
			}
			
			
		//********************************************************************************
		//******	Filter Attribute Accessor Methods
			
			
			/// Return a human-readable name for this tone generator.
			/**
			  * The method returns the string "Tone Generator".
			  */
			virtual UTF8String getName() const;
			
			
			/// Return the manufacturer name of this tone generator.
			/**
			  * The method returns the string "Om Sound".
			  */
			virtual UTF8String getManufacturer() const;
			
			
			/// Return an object representing the version of this tone generator.
			virtual FilterVersion getVersion() const;
			
			
			/// Return an object that describes the category of effect that this filter implements.
			/**
			  * This method returns the value FilterCategory::ANALYSIS.
			  */
			virtual FilterCategory getCategory() const;
			
			
			/// Return whether or not this tone generator can process audio data in-place.
			/**
			  * This method always returns TRUE, tone generators can process audio data in-place.
			  */
			virtual Bool allowsInPlaceProcessing() const;
			
			
		//********************************************************************************
		//******	Filter Parameter Accessor Methods
			
			
			/// Return the total number of generic accessible parameters this filter has.
			virtual Size getParameterCount() const;
			
			
			/// Get information about the filter parameter at the specified index.
			virtual Bool getParameterInfo( Index parameterIndex, FilterParameterInfo& info ) const;
			
			
			/// Get any special name associated with the specified value of an indexed parameter.
			virtual Bool getParameterValueName( Index parameterIndex, const FilterParameter& value, UTF8String& name ) const;
			
			
		//********************************************************************************
		//******	Public Static Property Objects
			
			
			/// A string indicating the human-readable name of this tone generator.
			static const UTF8String NAME;
			
			
			/// A string indicating the manufacturer name of this tone generator.
			static const UTF8String MANUFACTURER;
			
			
			/// An object indicating the version of this tone generator.
			static const FilterVersion VERSION;
			
			
	private:
		
		//********************************************************************************
		//******	Filter Parameter Value Accessor Methods
			
			
			/// Place the value of the parameter at the specified index in the output parameter.
			virtual Bool getParameterValue( Index parameterIndex, FilterParameter& value ) const;
			
			
			/// Attempt to set the parameter value at the specified index.
			virtual Bool setParameterValue( Index parameterIndex, const FilterParameter& value );
			
			
		//********************************************************************************
		//******	Private Stream Reset Method
			
			
			/// A method that is called whenever the filter's stream of audio is being reset.
			/**
			  * This method allows the filter to reset all parameter interpolation
			  * and processing to its initial state to avoid coloration from previous
			  * audio or parameter values.
			  */
			virtual void resetStream();
			
			
		//********************************************************************************
		//******	Private Filter Processing Methods
			
			
			/// Fill the output frame with the specified number of samples of the tone that is being generated.
			virtual SoundResult processFrame( const SoundFrame& inputFrame,
													SoundFrame& outputFrame, Size numSamples );
			
			
			/// Generate the specified number of samples of a wave and place them in the output buffer.
			/**
			  * The wave is computed by evaluating the given wave function using a current phase,
			  * given in radians. The wave function should have a period of 2 pi radians and should
			  * be valid over at least the range [0,+infinity].
			  */
			template < Sample32f (*waveFunction)( Float ) >
			void generateWave( SoundBuffer& outputBuffer, Size numSamples,
								Float frequencyChangePerSample, Gain outputGainChangePerSample );
			
			
			/// Generate the specified number of samples of white noise and place them in the output buffer.
			void generateWhiteNoise( SoundBuffer& outputBuffer, Size numSamples,
									Gain outputGainChangePerSample );
			
			
			/// Generate the specified number of samples of pink noise and place them in the output buffer.
			void generatePinkNoise( SoundBuffer& outputBuffer, Size numSamples,
									Gain outputGainChangePerSample );
			
			
		//********************************************************************************
		//******	Private Wave Generation Methods
			
			
			/// Compute the value of a sine wave, given the specified phase value in radians.
			OM_FORCE_INLINE static Sample32f sine( Float phase )
			{
				return math::sin( phase );
			}
			
			
			/// Compute the value of a square wave, given the specified phase value in radians.
			OM_FORCE_INLINE static Sample32f square( Float phase )
			{
				return math::mod( phase, Float(2)*math::pi<Float>() ) <= math::pi<Float>() ? Sample32f(1) : Sample32f(-1);
			}
			
			
			/// Compute the value of a saw wave, given the specified phase value in radians.
			OM_FORCE_INLINE static Sample32f saw( Float phase )
			{
				Float phaseOverTwoPi = phase / (Float(2)*math::pi<Float>());
				return Float(2)*(phaseOverTwoPi - math::floor(phaseOverTwoPi + Float(0.5)));
			}
			
			
			/// Compute the value of a triangle wave, given the specified phase value in radians.
			OM_FORCE_INLINE static Sample32f triangle( Float phase )
			{
				Float phaseOverTwoPi = phase / (Float(2)*math::pi<Float>()) + Float(0.25);
				Float saw = (phaseOverTwoPi - math::floor(phaseOverTwoPi + Float(0.5)));
				
				return Float(4)*math::abs(saw) - Float(1);
			}
			
			
		//********************************************************************************
		//******	Private Data Members
			
			
			/// An enum value indicating the type of tone to generate with this tone generator.
			ToneType type;
			
			
			/// The gain that is applied to the output of the tone generator.
			/**
			  * This is gain scaling factor that is applied to the output of whatever
			  * tone is being currently generated. The different tones are normalized
			  * to 0 dBFS, or as close as is possible. This factor adjusts their output
			  * level relative to that baseline.
			  */
			Gain outputGain;
			
			
			/// The target output gain for this tone generator.
			/**
			  * This value allows the tone generator to do smooth transitions between
			  * different output gains.
			  */
			Gain targetOutputGain;
			
			
			/// The frequency of the generated tone in hertz.
			/**
			  * For frequency-local tones (i.e. not full-spectrum noise), this value
			  * indicates the dominant frequency of the generated tone. For most wave types
			  * (sine, square, saw, triangle) this is the frequency of the generated wave.
			  *
			  * This value has no effect for other noise types that contain information across
			  * the entire frequency spectrum (pink noise, white noise, etc.).
			  */
			Float frequency;
			
			
			/// The target frequency of the generated tone in hertz.
			/**
			  * This value allows the tone generator to do smooth transitions between
			  * different frequencies.
			  */
			Float targetFrequency;
			
			
			/// The current phase of the generated wave (in radians).
			Float phase;
			
			
			/// An array of values indicating the sample histories for the 7 1st order pink noise approximation filters.
			StaticArray<Float,7> pinkNoiseHistory;
			
			
			/// The bandwidth of this tone generator's noise band in octaves.
			Float bandwidth;
			
			
			/// A band pass filter used to filter noise signals.
			BandFilter* bandFilter;
			
			
};




//##########################################################################################
//*************************  End Om Sound Filters Namespace  *******************************
OM_SOUND_FILTERS_NAMESPACE_END
//******************************************************************************************
//##########################################################################################


#endif // INCLUDE_OM_SOUND_TONE_GENERATOR_H
